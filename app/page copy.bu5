// app/page.tsx
import Link from "next/link";
import { listPosts, type PostMeta } from "@/lib/md";

export const revalidate = 60;

type TreeNode = {
  files: PostMeta[];
  children: Map<string, TreeNode>;
};

/** Build a nested folder/file tree from all posts */
function buildTree(posts: PostMeta[]): TreeNode {
  const root: TreeNode = { files: [], children: new Map() };

  for (const p of posts) {
    const parts = p.slugPath.split("/").filter(Boolean);
    let node = root;
    for (let i = 0; i < parts.length - 1; i++) {
      const seg = parts[i];
      if (!node.children.has(seg))
        node.children.set(seg, { files: [], children: new Map() });
      node = node.children.get(seg)!;
    }
    node.files.push(p);
  }
  return root;
}

/** Make folder names human-friendly */
function titleize(s: string) {
  return s.replace(/[-_]/g, " ").replace(/\b\w/g, (m) => m.toUpperCase());
}

/** Render folders and files recursively.
 *  `depth` controls header level (2 = h2, 3 = h3, ‚Ä¶)
 */
function RenderTree({
  node,
  path = "",
  depth = 2,
}: {
  node: TreeNode;
  path?: string;
  depth?: number;
}) {
  const files = [...node.files].sort((a, b) => {
    if (a.date && b.date) return b.date.localeCompare(a.date);
    if (a.date) return -1;
    if (b.date) return 1;
    return a.title.localeCompare(b.title);
  });

  const children = [...node.children.entries()].sort(([a], [b]) =>
    a.localeCompare(b)
  );

  const HeadingTag = `h${Math.min(depth, 6)}` as keyof JSX.IntrinsicElements;

  return (
    <div className="space-y-6">
      {files.length > 0 && (
        <ul className="list-disc pl-6">
          {files.map((p) => (
            <li key={p.slugPath}>
              <Link href={`/${p.slugPath}`}>{p.title}</Link>
              {p.date && (
                <span className="ml-2 text-sm opacity-70">
                  ({new Date(p.date).toLocaleDateString()})
                </span>
              )}
            </li>
          ))}
        </ul>
      )}

      {children.map(([folder, child]) => {
        const childPath = path ? `${path}/${folder}` : folder;
        return (
          <section key={childPath} className="mt-4">
            <HeadingTag className="font-semibold mb-2">
              {titleize(folder)}
            </HeadingTag>
            <RenderTree node={child} path={childPath} depth={depth + 1} />
          </section>
        );
      })}
    </div>
  );
}

export default async function HomePage() {
  const posts = await listPosts();
  const tree = buildTree(posts);

  return (
    <main>
      <h1>Yellow Mangoes üçãü•≠</h1>
      <p className="mb-6">
        All <code>.md</code> files under <code>/content</code> appear below.
        Nested folders use decreasing header sizes to show structure.
      </p>

      {/* Root-level files (no folder header) */}
      {tree.files.length > 0 && <RenderTree node={{ ...tree, children: new Map() }} depth={2} />}

      {/* Top-level folders */}
      {[...tree.children.entries()]
        .sort(([a], [b]) => a.localeCompare(b))
        .map(([folder, child]) => (
          <section key={folder} className="mb-8">
            <h2 className="text-2xl font-semibold mb-2">{titleize(folder)}</h2>
            <RenderTree node={child} path={folder} depth={3} />
          </section>
        ))}
    </main>
  );
}